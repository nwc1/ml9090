import heapq

class Puzzle8:
    def __init__(self, initial_state, goal_state):
        self.initial_state = initial_state
        self.goal_state = goal_state

    def is_goal_state(self, state):
        return state == self.goal_state

    def get_blank_position(self, state):
        for i in range(3):
            for j in range(3):
                if state[i][j] == 0:
                    return i, j

    def generate_next_states(self, state):
        blank_row, blank_col = self.get_blank_position(state)
        next_states = []

        # Possible moves: up, down, left, right
        moves = [(1, 0), (-1, 0), (0, 1), (0, -1)]

        for move in moves:
            new_row, new_col = blank_row + move[0], blank_col + move[1]

            if 0 <= new_row < 3 and 0 <= new_col < 3:
                new_state = [row.copy() for row in state]
                new_state[blank_row][blank_col], new_state[new_row][new_col] = new_state[new_row][new_col], new_state[blank_row][blank_col]
                next_states.append(new_state)

        return next_states

    def manhattan_distance(self, state):
        distance = 0

        for i in range(3):
            for j in range(3):
                value = state[i][j]
                if value != 0:
                    goal_row, goal_col = divmod(value - 1, 3)
                    distance += abs(i - goal_row) + abs(j - goal_col)

        return distance

    def astar_search(self):
        priority_queue = [(self.manhattan_distance(self.initial_state), 0, self.initial_state)]
        visited = set()

        while priority_queue:
            _, cost, current_state = heapq.heappop(priority_queue)


            if tuple(map(tuple, current_state)) not in visited:
                print(f"Visiting state:\n{current_state}, Cost: {cost}")

                visited.add(tuple(map(tuple, current_state)))

                for next_state in self.generate_next_states(current_state):
                    if tuple(map(tuple, next_state)) not in visited:
                        total_cost = cost + 1
                        priority = total_cost + self.manhattan_distance(next_state)
                        heapq.heappush(priority_queue, (priority, total_cost, next_state))
            if self.is_goal_state(current_state):
                print("Goal reached!")
                return

        print("Goal not reached.")

# Example Usage:
if __name__ == "__main__":
    initial_state = [
        [1, 2, 3],
        [0, 4, 6],
        [7, 5, 8]
    ]

    goal_state = [
        [1, 2, 3],
        [4, 5, 6],
        [7, 8, 0]
    ]

    puzzle = Puzzle8(initial_state, goal_state)
    print("A* Search for 8-Puzzle:")
    puzzle.astar_search()
