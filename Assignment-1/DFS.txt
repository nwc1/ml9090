from collections import defaultdict

def add_edge(graph, u, v):
    graph[u].append(v)
    graph[v].append(u)  # Assuming an undirected graph

def dfs(graph, start, visited):
    visited.add(start)
    print(start, end=' ')

    for neighbor in graph[start]:
        if neighbor not in visited:
            dfs(graph, neighbor, visited)

# Example Usage:
graph = defaultdict(list)
add_edge(graph, 0, 1)
add_edge(graph, 0, 2)
add_edge(graph, 1, 3)
add_edge(graph, 2, 1)
add_edge(graph, 2, 3)
add_edge(graph, 3, 3)
start_vertex = 0
visited = set()
print(f"DFS Traversal starting from vertex {start_vertex}:")
dfs(graph, start_vertex, visited)
