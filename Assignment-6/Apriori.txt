pip install mlxtend

from itertools import combinations
class Apriori:
    def __init__(self, min_support, min_confidence):
        self.min_support = min_support
        self.min_confidence = min_confidence
        self.itemsets = {}
        self.transactions = []
    def load_data(self, dataset):
        self.transactions = dataset
    def get_itemsets(self, k):
        if k == 1:
            itemsets = {}
            for transaction in self.transactions:
                for item in transaction:
                    itemsets[item] = itemsets.get(item, 0) + 1
            return {frozenset([item]): count for item, count in itemsets.items() if count >= self.min_support}
        else:
            itemsets = {}
            prev_itemsets = self.itemsets[k - 1]
            for itemset1, support1 in prev_itemsets.items():
                for itemset2, support2 in prev_itemsets.items():
                    if len(itemset1.union(itemset2)) == k and len(itemset1.intersection(itemset2)) == k - 2:
                        merged_itemset = itemset1.union(itemset2)
                        if merged_itemset not in itemsets:
                            itemsets[merged_itemset] = 0
                            for transaction in self.transactions:
                                if merged_itemset.issubset(transaction):
                                    itemsets[merged_itemset] += 1
            return {itemset: support for itemset, support in itemsets.items() if support >= self.min_support}
    def generate_rules(self):
        rules = []
        for k, itemsets in self.itemsets.items():
            if k > 1:
                for itemset in itemsets.keys():
                    for i in range(1, k):
                        for antecedent in combinations(itemset, i):
                            antecedent = frozenset(antecedent)
                            consequent = itemset.difference(antecedent)
                            confidence = itemsets[itemset] / self.itemsets[len(antecedent)][antecedent]
                            if confidence >= self.min_confidence:
                                rules.append((antecedent, consequent, confidence))
        return rules
    def fit(self):
        k = 1
        self.itemsets[k] = self.get_itemsets(k)
        while self.itemsets[k]:
            k += 1
            self.itemsets[k] = self.get_itemsets(k)

    def print_itemsets(self):
        for k, itemsets in self.itemsets.items():
            print(f"Itemsets of size {k}:")
            for itemset, support in itemsets.items():
                print(f"{list(itemset)} - support: {support}")
    def print_rules(self):
        rules = self.generate_rules()
        for antecedent, consequent, confidence in rules:
            print(f"{list(antecedent)} => {list(consequent)} - confidence: {confidence}")
# Example usage:
if __name__ == "__main__":
    # Example dataset
    dataset = [
        {"bread", "milk"},
        {"bread", "diaper", "beer", "egg"},
        {"milk", "diaper", "beer", "cola"},
        {"bread", "milk", "diaper", "beer"},
        {"bread", "milk", "diaper", "cola"}
    ]
    apriori = Apriori(min_support=0.5, min_confidence=0.5)
    apriori.load_data(dataset)
    apriori.fit()
    print("Frequent Itemsets:")
    apriori.print_itemsets()
    print("\nAssociation Rules:")
    apriori.print_rules()